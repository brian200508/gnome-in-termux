#!/bin/bash

R="$(printf '\033[1;31m')"
G="$(printf '\033[1;32m')"
Y="$(printf '\033[1;33m')"
W="$(printf '\033[1;37m')"
C="$(printf '\033[1;36m')"

function banner() {
    clear
printf "\033[33m╭━━━╮╱╱╱╱╱╱╱╱╱╱╱╱╭━━╮╱╱╱╭━━━━╮\033[0m\n"
printf "\033[33m┃╭━╮┃╱╱╱╱╱╱╱╱╱╱╱╱╰┫┣╯╱╱╱┃╭╮╭╮┃\033[0m\n"
printf "\033[33m┃┃╱╰╋━╮╭━━┳╮╭┳━━╮╱┃┃╭━╮╱╰╯┃┃┣┻━┳━┳╮╭┳╮╭┳╮╭╮\033[0m\n"
printf "\033[33m┃┃╭━┫╭╮┫╭╮┃╰╯┃┃━┫╱┃┃┃╭╮╮╱╱┃┃┃┃━┫╭┫╰╯┃┃┃┣╋╋╯\033[0m\n"
printf "\033[33m┃╰┻━┃┃┃┃╰╯┃┃┃┃┃━┫╭┫┣┫┃┃┃╱╱┃┃┃┃━┫┃┃┃┃┃╰╯┣╋╋╮\033[0m\n"
printf "\033[33m╰━━━┻╯╰┻━━┻┻┻┻━━╯╰━━┻╯╰╯╱╱╰╯╰━━┻╯╰┻┻┻━━┻╯╰╯\033[0m\n"
echo "${C}${BOLD} Install Gnome Desktop In Termux ${W}"
echo                                                    
}

function select_an_option() {
    local max_options=$1
    local default_option=${2:-1}
    local response_var=$3
    local response

    while true; do
        read -p "${Y}select an option (Default ${default_option}): ${W}" response
        response=${response:-$default_option}

        if [[ $response =~ ^[0-9]+$ ]] && ((response >= 1 && response <= max_options)); then
            echo
            echo "${R} [${W}-${R}]${G} Continuing with answer: $response${W}"
            sleep 0.2
            eval "$response_var=$response"
            break
        else
            echo
            echo "${R} [${R}☓${R}]${R} Invalid input. Please enter a number between 1 and $max_options.${W}"
        fi
    done
}

function check_root(){
	if [ $EUID -ne 0 ]; then
		echo -ne " ${R}Please Login Into Root User Then Run it Again!\n\n"${W}
		exit 1
	fi
}

function questions() {
	banner
	echo 
	echo "${R} [${W}-${R}]${G}Select browser you want to install"${W}
	echo
	echo "${Y}1. firefox"${W}
	echo
	echo "${Y}2. chromium"${W}
	echo 
	echo "${Y}3. firefox & chromium (both)"${W}
	echo
	read -p "${Y}select an option (Default 1): "${W} answer_browser
	banner
	read -p "${R} [${W}-${R}]${Y}Do you want to install VLC (y/n) "${W} vlc_answer
    banner
	read -p "${R} [${W}-${R}]${Y}Do you want to install VSCode (Visual Studio Code) (y/n) "${W} vscode_answer
    banner
    read -p "${R} [${W}-${R}]${Y}Do you want to create a normal user account (y/n) "${W} useradd_answer
    useradd_answer="${useradd_answer:-y}"
    banner
#     if [[ "$useradd_answer" == "n" ]]; then
#     banner
#     echo "${R} [${W}-${R}]${G}Skiping User Account Setup"${W}
#     else
# 	echo "${R} [${W}-${R}]${G}${BOLD} Select user account type"${W}
# 	echo
# 	echo "${Y}1. User with no password confirmation"${W}
# 	echo
# 	echo "${Y}2. User with password confirmation"${W}
# 	echo
# 	select_an_option 2 1 pass_type
# 	    if [[ "$pass_type" == "1" ]]; then
# 	    while true; do
# 		echo " "
# 		echo "${R} [${W}-${R}]${G} Default Password Will Be Set, Because Sometime It Might Ask You For Password"${W}
# 		echo
# 		echo "${R} [${W}-${R}]${G} Password:-${C}root"${W}
# 		echo
# 	    read -p "${R} [${W}-${R}]${G} Input username [Lowercase]: "${W} user_name
# 	    echo
# 	    read -p "${R} [${C}-${R}]${Y} Do you want to continue with username ${C}$user_name ${Y}? (y/n) : "${W} choice
# 	    echo
# 	    choice="${choice:-y}"
# 	    echo
# 	    echo "${R} [${W}-${R}]${G} Continuing with answer: $choice"${W}
# 	    sleep 0.2
# 	    case $choice in
# 	    [yY]* )
# 	    echo "${R} [${W}-${R}]${G} Continuing with username ${C}$user_name "${W}
# 	    break;;
# 	    [nN]* )
# 	    echo "${R} [${W}-${R}]${G}Please provide username again."${W}
# 	    echo
# 	    ;;
# 	    * )
# 	    echo "${R}[${R}☓${R}]${R}Invalid input. Please enter 'y' or 'n'."${W}
# 	    ;;
# 	    esac
# 	    done
# 	    elif [[ "$pass_type" == "2" ]]; then
# 	    echo
# 	    echo "${R} [${W}-${R}]${G}${BOLD} Create user account"${W}
#     echo
#     while true; do
#     read -p "${R} [${W}-${R}]${G}Input username [Lowercase]: "${W} user_name
#     echo
#     read -p "${R} [${W}-${R}]${G}Input Password: "${W} pass
#     echo
#     read -p "${R} [${W}-${R}]${Y}Do you want to continue with username ${C}$user_name ${Y}and password ${C}$pass${Y} ? (y/n) : " choice
# 	choice="${choice:-y}"
# 	    echo
# 	    echo "${R} [${W}-${R}]${G} Continuing with answer: $choice"${W}
# 	    echo ""
# 	    sleep 0.2
#     case $choice in
#         [yY]* )
#             echo "${R} [${W}-${R}]${G}Continuing with username ${C}$user_name ${G}and password ${C}$pass"
#             sleep 0.3
#             break;;
#         [nN]* )
# 	    echo "${R} [${W}-${R}]${G}Please provide username and password again."${W}
# 	    echo
#         ;;
#         * )
#             echo "${R}Invalid input. Please enter 'y' or 'n'."${W}
#             ;;
#     esac
# done
#     fi
#     fi
}

function get_sys_info() {
	if [ -f /etc/os-release ]; then
    . /etc/os-release
	if [[ -e "/data/data/com.termux/files/usr/bin/fedora" ]]; then
        rm -rf /data/data/com.termux/files/usr/bin/fedora
    fi
	fi
}

function update_sys() {
	banner
	echo "${R} [${W}-${R}]${G}Updating fedora's System..."
	dnf update -y
}

function setup_tx11() {
    echo "${G} Fixing gnome black screen issue..."${W}
    find /usr -type f -iname "*login1*" -exec rm -f {} \; && mkdir /run/dbus
    sleep 2
    if [ "$useradd_answer" == "y" ]; then
    final_user="$user_name"
    else
    final_user="root"
    fi
cat <<EOF >> "/data/data/com.termux/files/usr/bin/fedora"
if [ "\$1" = "-tx11" ]; then
    pkill -f com.termux.x11 2>/dev/null
    pulseaudio --start --load="module-native-protocol-tcp auth-ip-acl=127.0.0.1 auth-anonymous=1" --exit-idle-time=-1
export XDG_RUNTIME_DIR=\${TMPDIR}
termux-x11 :0 >/dev/null &
sleep 3
am start --user 0 -n com.termux.x11/com.termux.x11.MainActivity > /dev/null 2>&1
sleep 1
proot-distro login fedora --shared-tmp -- /bin/bash -c 'export DISPLAY=:0 XDG_RUNTIME_DIR=\${TMPDIR} PULSE_SERVER=127.0.0.1 XDG_CURRENT_DESKTOP="GNOME" && rm -rf /run/dbus/pid && dbus-daemon --system && su - $final_user -c "env DISPLAY=:0 dbus-launch gnome-shell --x11"'
elif [ "\$1" = "-remove" ]; then
    proot-distro remove fedora
	rm \$PREFIX/bin/fedora
elif [ "\$1" = "-r" ]; then
    proot-distro login fedora
else
    proot-distro login --user $final_user fedora
fi
EOF
chmod +x /data/data/com.termux/files/usr/bin/fedora
}

# function login() {
# 	banner
#     if [ "$useradd_answer" == "y" ]; then
#     final_user="$user_name"
#     else
#     final_user="root"
#     fi

#     if [[ "$pass_type" == "2" ]]; then
#     final_pass="${pass}"
#     else
#     final_pass="root"
#     fi

#     if [ "$useradd_answer" == "y" ]; then
#     groupadd storage
#     groupadd wheel
# 	useradd -m -g users -s $(which bash) ${final_user}
#     usermod -aG wheel,polkitd,audio,video,storage ${final_user}
#     echo "${final_user}:${final_pass}" | chpasswd
#     if [[ "$pass_type" == "1" ]];then
#     echo "$final_user ALL=(ALL) NOPASSWD:ALL" | tee -a /etc/sudoers
#     elif [[ "$pass_type" == "2" ]];then
#     echo "$final_user ALL=(ALL:ALL) ALL" | tee -a /etc/sudoers
#     fi
# fi
#     clear   
# }

function vlc_installer() {
	banner
if [ "$vlc_answer" == "y" ]; then
	echo "${R} [${W}-${R}]${G}Installing vlc.."${W}
		dnf install vlc -y
else
    echo "${R} [${W}-${R}]${C}Canceling Vlc Installation...."${W}
    sleep 1.5
fi
}

function install_chromium() {
	banner
	echo "${R} [${W}-${R}]${G} installing chromium..."${W}
    dnf install chromium -y
    sed -i 's/chromium %U/chromium --no-sandbox %U/g' /usr/share/applications/chromium.desktop
}

function install_vscode() {
	banner
	echo -e "${R} [${W}-${R}]${G} installing VSCode..."${W}
	wget -O ~/code_stable_arm64.rpm 'https://code.visualstudio.com/sha/download?build=stable&os=linux-rpm-arm64'
    sudo dnf localinstall ~/code_stable_arm64.rpm
	rm ~/code_stable_arm64.rpm
}

function firefox_install() {
		clear
		banner
		sleep 1
		clear
        echo "${R} [${W}-${R}]${Y} Installing Firefox..."${W}
		echo
        dnf install firefox -y
}

function browser_installer() {
	banner
	if [[ ${answer_browser} == "1" ]]; then 
		firefox_install
	elif [[ ${answer_browser} == "2" ]]; then
		install_chromium
	elif [[ ${answer_browser} == "3" ]]; then
		firefox_install
		install_chromium
	elif [[ ${answer_browser} == "" ]]; then 
		firefox_install
	else 
		firefox_install
	fi
}
	
function package() {
	banner
    echo -e "${R} [${W}-${R}]${C} Checking required packages..."${W}
    dnf install sudo dbus -y
}

function install_desktop() {
    echo "${R} [${W}-${R}]${G}Installing Gnome Core.."${W}
	sleep 2
    update_sys
    dnf install gnome-shell gnome-terminal gnome-software gnome-tweaks -y
	clear
}

function add_sound() {
	echo -e "\n${R} [${W}-${R}]${C} Fixing Sound Problem..."${W}
    if [[ ! -e "/data/data/com.termux/files/home/.${ID}-sound-service" ]]; then
        touch /data/data/com.termux/files/home/.${ID}-sound-service
    fi
    echo "pulseaudio --start --exit-idle-time=-1" >> /data/data/com.termux/files/home/.${ID}-sound-service
    echo "pacmd load-module module-native-protocol-tcp auth-ip-acl=127.0.0.1 auth-anonymous=1" >> /data/data/com.termux/files/home/.${ID}-sound-service
	echo "$(echo "bash ~/.${ID}-sound-service" | cat - /data/data/com.termux/files/usr/bin/$ID )" > /data/data/com.termux/files/usr/bin/$ID
	echo "export PULSE_SERVER=127.0.0.1" >> /etc/profile
    source /etc/profile
}

function check_firefox() {
    echo "${R} [${W}-${R}]${Y}Checking if Firefox is installed or not...${W}"
    if ! type -p "firefox" &>/dev/null; then
        sleep 2
        echo "${R} [${W}-${R}]${R}Firefox not installed...${W}"
        firefox_install
    else
        echo "${R} [${W}-${R}]${G}Firefox is already installed.${W}"
    fi
}

function check_chromium() {
    echo "${R} [${W}-${R}]${Y}Checking if Chromium is installed or not...${W}"
    if ! type -p "chromium" &>/dev/null; then
        sleep 2
        echo "${R} [${W}-${R}]${R}Chromium is not installed...${W}"
        install_chromium
    else
        echo "${R} [${W}-${R}]${G}Chromium is already installed.${W}"
    fi
}

function check_vscode() {
    echo "${R} [${W}-${R}]${Y}Checking if VSCode is installed or not...${W}"
    if ! type -p "code" &>/dev/null; then
        sleep 2
        echo "${R} [${W}-${R}]${R}VSCode is not installed...${W}"
        install_vscode
    else
        echo "${R} [${W}-${R}]${G}VSCode is already installed.${W}"
    fi
    echo "${R} [${W}-${R}]${R}Fixing VSCode application links...${W}"
    sed -i 's/code %F/code --no-sandbox %F/g' /usr/share/applications/code.desktop
    sed -i 's/code --new-window %F/code --no-sandbox --new-window %F/g' /usr/share/applications/code.desktop
}

function check_install() {
    echo "${R} [${W}-${R}]${Y}Checking if everything is installed or not...${W}"
    sleep 1
    # Desktop check
    echo "${R} [${W}-${R}]${Y}Checking if GNOME installed...${W}"
    if ! type -p "gnome-shell" &>/dev/null; then
	sleep 2
        echo "${R} [${W}-${R}]${R}GNOME Desktop is not installed perfectly...${W}"
		echo "${G}Fixing ..."${W}
        sleep 2
        install_desktop
    else
        echo "${R} [${W}-${R}]${G}GNOME Desktop is Installed Successfully...${W}"
        sleep 2
    fi
    # Browser check
    if [[ "${answer_browser}" == "1" ]]; then
        check_firefox
    elif [[ "${answer_browser}" == "2" ]]; then
        check_chromium
    elif [[ "${answer_browser}" == "3" ]]; then
        check_firefox
        check_chromium
    else
        check_firefox
    fi
    # VLC check
    if [[ "${vlc_answer}" == "y" ]]; then
        echo "${R} [${W}-${R}]${Y}Checking if VLC is installed or not...${W}"
        if ! type -p "vlc" &>/dev/null; then
            sleep 2
            echo "${R} [${W}-${R}]${R}VLC is not installed, installing now...${W}"
            pacman -Sy vlc -y
        fi
    fi
    # VSCode check
    if [[ "${vscode_answer}" == "y" ]]; then
        check_vscode
    else
        echo "${R} [${W}-${R}]${G}Skipping VSCode.${W}"
    fi
}

function note() {
banner
    echo -e "${G} Successfully Installed !"${W}
    sleep 3
	echo
    echo -e "${G}Now Restart Termux First And Login Into fedora "${W}
	echo
    echo -e "${G}Type ${C}fedora${G} to login into fedora "${W}
	echo
    echo "${C}Check the NOTE (👇) section in Github Readme to know all commands"${W}
    echo
    echo "https://github.com/sabamdarif/gnome-in-termux/blob/main/README.md#note"
    echo
}

check_root
questions
get_sys_info
update_sys
package
login
install_desktop
browser_installer
vlc_installer
add_sound
check_install
setup_tx11
note
